# Exercise 13.1: Find an image of a star.
# Make a grid of stars appear on the screen.

# I didn't change much from the alien code.
# I removed the code about bullets and ships to simplify the code.
# I replaced the alien avariables with stars.
# I replaced the image of the alien with the image of a star.

# Contents of sea_of_stars.py

import sys
import pygame
from settings import Settings
from stars import Star

class SeaofStars():
    """Overall class to manage game assets and behavior."""

    def __init__(self):
        """Initialize the game, and create game resources."""
        pygame.init()
        self.settings = Settings()

        # fullscreen mode. remove comments to enable fullscreen mode.
        #self.screen = pygame.display.set_mode((0,0), pygame.FULLSCREEN) 
        # # tells pygame to find the window size to fill the screen
        #self.settings.screen_width = self.screen.get_rect().width
        #self.settings.screen_height = self.screen.get_rect().height

        self.screen = pygame.display.set_mode((
            self.settings.screen_width, self.settings.screen_height))
        pygame.display.set_caption("Sea of Stars")

        self.stars = pygame.sprite.Group()

        self._create_sea()

    def run_game(self):
        """Start the main loop for the game."""
        while True:
            self._update_screen()
 

    def _update_screen(self):
        """Update images on the screen, and flip to the new screen."""
        self.screen.fill(self.settings.bg_color)
        self.stars.draw(self.screen)

        pygame.display.flip()

    def _create_sea(self):
        """Create the sea of stars."""
        # Make a star and find the num. of stars in a row.
        # Spacing between each star is equal to one star width.
        star = Star(self)
        star_width, star_height = star.rect.size
        available_space_x = self.settings.screen_width - (2 * star_width)
        number_stars_x = available_space_x // (2 * star_width)

        # Determine the number of rows of stars that fit on the screen.
        available_space_y = ((self.settings.screen_height) - 
            (3 * star_height))
        number_rows = available_space_y // (2 * star_height)

        # Create the full sea of stars.
        for row_number in range(number_rows):
            for star_number in range(number_stars_x):
                self._create_star(star_number, row_number)

    def _create_star(self, star_number, row_number):
        """Create a and place it in the row."""
        star = Star(self)
        star_width, star_height = star.rect.size
        star.x = star_width + 2 * star_width * star_number
        star.rect.x = star.x
        star.rect.y = star_height + 2 * star.rect.height * row_number
        self.stars.add(star)


if __name__ == '__main__':
    # Make a game instance, and run the game.
    ai = SeaofStars()
    ai.run_game()

# Modify the program from exercise 13.2 to offset each star's position
# by a random integer. The book suggests using a range from -10 to 10.

# I modified the _Create_star function to add random integers to the
# star's positions.

def _create_star(self, star_number, row_number):
    """Create a and place it in the row."""
    star = Star(self)
    star_width, star_height = star.rect.size
    star.x = star_width + 2 * star_width * star_number + randint(-10,10)
    star.rect.x = star.x 
    star.rect.y = star_height + (2 * star.rect.height * row_number) \
            + randint(-20,20)
    self.stars.add(star)

# Exercise 13.3: Find an image of a raindrop and create a grid of raindrops.
# Make the drops fall toward the bottom of the screen until they disappear.

# Contents of storm.py:

import sys
import pygame
from settings import Settings
from raindrops import Raindrop

class Storm():
    """Overall class to manage raindrops."""

    def __init__(self):
        """Initialize the game, and create game resources."""
        pygame.init()
        self.settings = Settings()

        self.screen = pygame.display.set_mode((
            self.settings.screen_width, self.settings.screen_height))
        pygame.display.set_caption("Storm")

        self.raindrops = pygame.sprite.Group()

        self._create_fleet()

    def run_game(self):
        """Start the main loop for the game."""
        while True:
            self._update_raindrops()
            self._update_screen()

    def _update_screen(self):
        """Update images on the screen, and flip to the new screen."""
        self.screen.fill(self.settings.bg_color)
        self.raindrops.draw(self.screen)

        pygame.display.flip()

    def _create_fleet(self):
        """Create the fleet of raindrops."""
        # Make a raindrop and find the num. of raindrops in a row.
        # Spacing between each raindrop is equal to one raindrop width.
        raindrop = Raindrop(self)
        raindrop_width, raindrop_height = raindrop.rect.size
        available_space_x = self.settings.screen_width - (2 * raindrop_width)
        number_raindrops_x = available_space_x // (2 * raindrop_width)

        # Determine the number of rows of raindrops that fit on the screen.
        available_space_y = self.settings.screen_height - (3 * raindrop_height)
        number_rows = available_space_y // (2 * raindrop_height)

        # Create the full fleet of raindrops.
        for row_number in range(number_rows):
            for raindrop_number in range(number_raindrops_x):
                self._create_raindrop(raindrop_number, row_number)

    def _create_raindrop(self, raindrop_number, row_number):
        """Create a raindrop and place it in the row."""
        raindrop = Raindrop(self)
        raindrop_width, raindrop_height = raindrop.rect.size
        raindrop.x = raindrop_width + 2 * raindrop_width * raindrop_number
        raindrop.rect.x = raindrop.x
        raindrop.rect.y = raindrop_height + (2 * raindrop.rect.height * row_number)
        self.raindrops.add(raindrop)

    def _make_fleet_fall(self):
        """Makes the fleet of raindrops fall."""
        for raindrop in self.raindrops.sprites():
            raindrop.rect.y += self.settings.raindrop_speed

    def _update_raindrops(self):
        """
        Check if fleet is at the edge, 
        then update the positions of all raindrops in the fleet.
        """
        self._make_fleet_fall()
        self.raindrops.update()
        

if __name__ == '__main__':
    # Make a game instance, and run the game.
    ai = Storm()
    ai.run_game()

# Contents of raindrops.py:

import pygame
from pygame.sprite import Sprite

class Raindrop(Sprite):
    """A class to represent a raindrop in the storm."""

    def __init__(self, ai_game):
        """Initialize the raindrop and set its starting position."""
        super().__init__()
        self.screen = ai_game.screen
        self.settings = ai_game.settings

        # Load the raindrop image and set its rect attribute.
        self.image = pygame.image.load('images/raindrop.bmp')
        self.rect = self.image.get_rect()

        # Start each new raindrop at the top left corner of the screen.
        self.rect.x  = self.rect.width 
        self.rect.y = self.rect.height

        # Store the raindrop's exact positions.
        self.x = float(self.rect.x)
        self.y = float(self.rect.y)

    def update(self):
        """Move the raindrop down."""
        self.y += self.settings.raindrop_speed

    def check_edges(self):
        """Return True of alien is at edge of screen."""
        screen_rect = self.screen.get_rect()
        if self.rect.right >= screen_rect.right or self.rect.left <= 0:
            return True

# I also changed the background color to black in settings.py

# Exercise 13.4: Modify the code from Exercise 13.3.
# When a row of raindrops disappears off the bottom of the screen, a new row
# appears at the top of the screen and begins to fall.

# My method: Instead of creating a raindrops when the row hits the bottom,
# I instead moved the fleet back to the start and re-started the cycle.
# If you keep creating new raindrops, you may run into lag
# as it is resource-intensive to keep loading images.

# Contents of storm.py:

import sys
import pygame
from settings import Settings
from raindrops import Raindrop

class Storm():
    """Overall class to manage raindrops."""

    def __init__(self):
        """Initialize the game, and create game resources."""
        pygame.init()
        self.settings = Settings()

        self.screen = pygame.display.set_mode((
            self.settings.screen_width, self.settings.screen_height))
        pygame.display.set_caption("Storm")

        self.raindrops = pygame.sprite.Group()

        self._create_fleet()

    def run_game(self):
        """Start the main loop for the game."""
        while True:
            self._update_raindrops()
            self._update_screen()

    def _update_screen(self):
        """Update images on the screen, and flip to the new screen."""
        self.screen.fill(self.settings.bg_color)
        self.raindrops.draw(self.screen)

        pygame.display.flip()

    def _create_fleet(self):
        """Create the fleet of raindrops."""
        # Make a raindrop and find the num. of raindrops in a row.
        # Spacing between each raindrop is equal to one raindrop width.
        raindrop = Raindrop(self)
        raindrop_width, raindrop_height = raindrop.rect.size
        available_space_x = self.settings.screen_width - (2 * raindrop_width)
        number_raindrops_x = available_space_x // (2 * raindrop_width)

        # Determine the number of rows of raindrops that fit on the screen.
        available_space_y = self.settings.screen_height 
        number_rows = available_space_y // (2 * raindrop_height)

        # Create the full fleet of raindrops.
        for row_number in range(number_rows):
            for raindrop_number in range(number_raindrops_x):
                self._create_raindrop(raindrop_number, row_number)

    def _create_raindrop(self, raindrop_number, row_number):
        """Create a raindrop and place it in the row."""
        raindrop = Raindrop(self)
        raindrop_width, raindrop_height = raindrop.rect.size
        raindrop.x = raindrop_width + 2 * raindrop_width * raindrop_number
        raindrop.rect.x = raindrop.x
        raindrop.rect.y = raindrop_height + (2 * raindrop.rect.height * row_number)
        self.raindrops.add(raindrop)

    def _check_fleet_edges(self):
        """Respond appropriately if a row of raindrops reaches the bottom."""
        for raindrop in self.raindrops.sprites():
            if raindrop.check_edges():
                #self.raindrops.remove(raindrop)
                #self._create_new_row()
                raindrop.y = 0
                raindrop.rect.y = 0
                self._make_fleet_fall()

    def _make_fleet_fall(self):
        """Makes the fleet of raindrops fall."""
        for raindrop in self.raindrops.sprites():
            raindrop.rect.y += self.settings.raindrop_speed

    def _update_raindrops(self):
        """
        Check if fleet is at the edge, 
        then update the positions of all raindrops in the fleet.
        """
        self._check_fleet_edges()
        self._make_fleet_fall()
        

if __name__ == '__main__':
    # Make a game instance, and run the game.
    ai = Storm()
    ai.run_game()


# Contents of raindrops.py

import pygame
from pygame.sprite import Sprite

class Raindrop(Sprite):
    """A class to represent a raindrop in the storm."""

    def __init__(self, ai_game):
        """Initialize the raindrop and set its starting position."""
        super().__init__()
        self.screen = ai_game.screen
        self.settings = ai_game.settings

        # Load the raindrop image and set its rect attribute.
        self.image = pygame.image.load('images/raindrop.bmp')
        self.rect = self.image.get_rect()

        # Start each new raindrop at the top left corner of the screen.
        self.rect.x  = self.rect.width 
        self.rect.y = self.rect.height

        # Store the raindrop's exact positions.
        self.x = float(self.rect.x)
        self.y = float(self.rect.y)

    def check_edges(self):
        """
        Return True if the bottom row of raindrops 
        is at the bottom of the screen.
        """
        screen_rect = self.screen.get_rect()
        if self.rect.top >= screen_rect.bottom:
            return True


# Contents of settings.py

class Settings:
    """A class to store the settings for Exercise 13.3-4."""

    def __init__(self):
        """Initialize the game's settings."""
        # Screen settings.
        self.screen_width = 1200
        self.screen_height = 800
        self.bg_color = (0, 0, 0)

        # Raindrop settings
        self.raindrop_speed = 1.0

# Exercise 13.5: Take the program from Exercise 12.6 and bring it to the 
# same point as the main version of Alien Invasion.
# It should have a fleet of aliens that move sideways towards the ship.

# Alternatively, place the aliens at random locations along the right side of
# the screen and send them towards the ship.

# I decided to stick with the simpler version, to take the original 
# Alien Invasion and flip the directions.
# The code is mostly the same, but I had to re-define how the aliens
# are placed in order to get them to start at the top right corner,
# start moving down, and, upon collision detection, move left 
# and start moving up.

# Contents of alien_invasion_sideways.py

import sys
import pygame
from settings import Settings
from ship import Ship
from bullet import Bullet
from alien import Alien

class AlienInvasion():
    """Overall class to manage game assets and behavior."""

    def __init__(self):
        """Initialize the game, and create game resources."""
        pygame.init()
        self.settings = Settings()

        # fullscreen mode. remove comments to enable fullscreen mode.
        # self.screen = pygame.display.set_mode((0,0), pygame.FULLSCREEN) 
        # tells pygame to find the window size to fill the screen
        # self.settings.screen_width = self.screen.get_rect().width
        # self.settings.screen_height = self.screen.get_rect().height

        self.screen = pygame.display.set_mode((
            self.settings.screen_width, self.settings.screen_height))
        pygame.display.set_caption("Alien Invasion")

        self.ship = Ship(self)
        self.bullets = pygame.sprite.Group()
        self.aliens = pygame.sprite.Group()

        self._create_fleet()

    def run_game(self):
        """Start the main loop for the game."""
        while True:
            self._check_events()
            self.ship.update()
            self._update_bullets()
            self._update_aliens()
            self._update_screen()
 
    def _check_events(self):
        """Respond to keypresses and mouse events."""
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                self._check_keydown_events(event)

            elif event.type == pygame.KEYUP:
                self._check_keyup_events(event)
    
    def _check_keydown_events(self, event):
        """Respond to keypresses."""
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = True
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = True
        elif event.key == pygame.K_UP:
            self.ship.moving_up = True
        elif event.key == pygame.K_DOWN:
            self.ship.moving_down = True
        elif event.key == pygame.K_SPACE:
            self._fire_bullet()
        elif event.key == pygame.K_q:
            sys.exit()


    def _check_keyup_events(self, event):
        """Respond to key releases."""
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = False
        if event.key == pygame.K_LEFT:
            self.ship.moving_left = False
        if event.key == pygame.K_UP:
            self.ship.moving_up = False
        if event.key == pygame.K_DOWN:
            self.ship.moving_down = False

    def _fire_bullet(self):
        """Create a new bullet and add it to the bullets group."""
        if len(self.bullets) < (self.settings.bullets_allowed):
            new_bullet = Bullet(self)
            self.bullets.add(new_bullet)

    def _update_bullets(self):
        """Update position of bullets and get rid of old bullets."""
        # Update bullet positions.
        self.bullets.update()

        # Get rid of bullets that have disappeared.
        for bullet in self.bullets.copy():
            if bullet.rect.right >= self.settings.screen_width:
                self.bullets.remove(bullet)

        self._check_bullet_alien_collisions()

        if not self.aliens:
            # Destroy existing bullets and create a new fleet.
            self.bullets.empty()
            self._create_fleet()
        
    def _check_bullet_alien_collisions(self):

        # Check for any bullets that have hit aliens.
        # Removes the bullet + alien upon collision.
        collisions = pygame.sprite.groupcollide(
            self.bullets, self.aliens, True, True
        )

        if not self.aliens:
            # Destroy existing bullets and create new fleet.
            self.bullets.empty()
            self._create_fleet()

    def _update_screen(self):
        """Update images on the screen, and flip to the new screen."""
        self.screen.fill(self.settings.bg_color)
        self.ship.blitme()
        for bullet in self.bullets.sprites():
            bullet.draw_bullet()
        self.aliens.draw(self.screen)

        pygame.display.flip()

    def _create_fleet(self):
        """Create the fleet of aliens."""
        # Make an alien and find the num. of aliens in a row.
        # Spacing between each alien is equal to one alien width.
        alien = Alien(self)
        ship_height = self.ship.rect.height
        ship_width = self.ship.rect.width
        alien_width, alien_height = alien.rect.size
        available_space_x = self.settings.screen_width - (2 * alien_width) - 3*ship_width
        number_aliens_x = available_space_x // (2 * alien_width)

        # Determine the number of rows of aliens that fit on the screen.
        available_space_y = ((self.settings.screen_height) - 
            (3 * alien_height))
        number_rows = available_space_y // (2 * alien_height)

        # Create the full fleet of aliens.
        for row_number in range(number_rows):
            for alien_number in range(number_aliens_x):
                self._create_alien(alien_number, row_number)

    def _create_alien(self, alien_number, row_number):
        """Create an alien and place it in the row."""
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        alien.x = self.settings.screen_width - (alien_width + 2 * alien_width * alien_number) - alien_width
        alien.rect.x = alien.x 
        alien.y = alien_height + (2 * alien.rect.height * row_number) 
        self.aliens.add(alien)

    def _check_fleet_edges(self):
        """Respond appropriately if any aliens have reached an edge."""
        for alien in self.aliens.sprites():
            if alien.check_edges():
                self._change_fleet_direction()
                break

    def _change_fleet_direction(self):
        """Drop the entire fleet and change the fleet's direction."""
        for alien in self.aliens.sprites():
            alien.rect.x -= self.settings.fleet_drop_speed
        self.settings.fleet_direction *= -1

    def _update_aliens(self):
        """
        Check if fleet is at the edge, 
        then update the positions of all aliens in the fleet.
        """
        self._check_fleet_edges()
        self.aliens.update()
        

if __name__ == '__main__':
    # Make a game instance, and run the game.
    ai = AlienInvasion()
    ai.run_game()

# Contents of alien.py

import pygame
from pygame.sprite import Sprite
from settings import Settings

class Alien(Sprite):
    """A class to represent a single alien in the fleet."""

    def __init__(self, ai_game):
        """Initialize the alien and set its starting position."""
        super().__init__()
        self.screen = ai_game.screen
        self.settings = ai_game.settings

        # Load the alien image and set its rect attribute.
        self.image = pygame.image.load('images/alien.bmp')
        self.rect = self.image.get_rect()

        # Start each new alien at the top right corner of the screen.
        self.rect.x = self.rect.width 
        self.rect.y = self.rect.height

        # Store the alien's exact position.
        self.x = float(self.rect.x)
        self.y = float(self.rect.x)

    def update(self):
        """Move the alien up or down."""
        self.y += (self.settings.alien_speed * self.settings.fleet_direction)
        self.rect.y = self.y

    def check_edges(self):
        """Return True of alien is at the top or bottom edge of screen."""
        screen_rect = self.screen.get_rect()
        if self.rect.bottom >= screen_rect.bottom or self.rect.top <= screen_rect.top:
            return True

# Contents of settings.py

class Settings:
    """A class to store the settings for Alien Invasion."""

    def __init__(self):
        """Initialize the game's settings."""
        # Screen settings.
        self.screen_width = 1200
        self.screen_height = 800
        self.bg_color = (255, 209, 220)
        self.bullets_allowed = 10

        # Ship settings
        self.ship_speed = 1.5

        # Bullet settings
        self.bullet_speed = 1.5
        self.bullet_width = 15
        self.bullet_height = 3
        self.bullet_color = (255, 105, 180)

        # Alien settings
        self.alien_speed = 0.3
        self.fleet_drop_speed = 10
        # fleet_direction of 1 represents down, -1 is up
        self.fleet_direction = 1

# Exercise 13.6: In Sideways Shooter, keep track of the number of the times
# the ship is hit and the number of times and alien is hit by the ship.
# Decide on an appropriate condition for ending the game, and stop the game
# when this situation occurs.

# Basically, I brought the sideways version of Alien Invasion up to speed
# with the main version. In the sideways version, when the aliens reach
# the left edge, the game should stop. Additionally, have the ship re-center 
# at the left center rather than the bottom center.







