# Exercise 8.1: Write the function display_message(). Use it to print out a sentence saying what you're learning in this chapter. Call the function.

def display_message():
    print("I am learning about functions in this chapter.")
    
display_message()

# Exercise 8.2: Write the function favorite_book() that accepts the parameter title and returns a print message saying that it is your favorite book. 

def favorite_book(title):
    print(f"{title.title()} is one of my favorite books.")
    
favorite_book("The grapes of wrath")

# Exercise 8.3: Write a function make_shirt() that accepts size and a message to be printed on it. 
# Make the function print a sentence that contains the size and message. Call the function once using positional arguments, and another time using keyword arguments.

# Using positional arguments.
def make_shirt(size, text):
    print(f"Your shirt is in size {size}. The shirt will say: {text}")

# Using keyword arguments.
def make_shirt2(size='L', text='hello world!'):
    print(f"Your shirt is in size {size}. The shirt will say: {text}")
    
make_shirt("L", "hello world!")
make_shirt2()

# Exercise 8.4 Modify the make_shirt() function from the previous exercise. Make L the default size and the default message be I Love Python. 
# Make a large shirt with the default message. Make a medium shirt with the default message. Make a shirt of any size with a different message.

def make_shirt(size='L', text='I love Python'):
    print(f"Your shirt is in size {size}. The shirt will say: {text}")
    
make_shirt()
make_shirt(size='M')
make_shirt(size='M', text='I love Java')

# Exercise 8.5 Write the function describe_city(). It should accept two parameters, the name of a city and the name of a country.
# Make the function print a sentence describing the city and the country. The country parameter should have a default value. Call the function for three different cities. At least one of the city should not be in the default country.

def describe_city(city, country='France'):
    print(f"{city.title()} is in {country}. ")
    
describe_city('Paris')
describe_city('Lyon')
describe_city('London', country='England')

# Exercise 8.6: Write a function called city_country(). It should accept the name of a city and a country. 
# It should return the string formatted like this: "City, Country." Call the function with three pairs of cities and their countries, and print the values returned by the function. 

def city_country(city,country):
    full_name = f"{city}, {country}"
    return full_name.title()

cc_pair = city_country("London","England")
print(cc_pair)

cc_pair = city_country("Paris","France")
print(cc_pair)

cc_pair = city_country("Madrid","Spain")
print(cc_pair)


# Exercise 8.7: Write a function called make_album(). It should accept the name of an artist and an album. 
# It should return a dictionary with the artist and album title. Make three dictionaries, each with a different artist and album. 
# Print the return values. Use an optional argument None to store the number of songs on an album. Make at least one function call that includes the number of songs on that album.

def make_album(artist, album, songnumber=None):
    album_dict = {'artist_name': artist, 'album_name': album, 'song_count':songnumber}
    return album_dict

aa_pair = make_album('AC/DC','Back in Black')
print(aa_pair)

aa_pair = make_album('Eagles','Hotel California')
print(aa_pair)

aa_pair = make_album('AC/DC','Back in Black')
print(aa_pair)

aa_pair = make_album('Michael Jackson','Thriller',9)
print(aa_pair)

# Exercise 8.8: Take the function from 8.7. 
# Write a while loop that lets the user enter an artist and their album. Call make_album() and print the dictionary. Include a quit value in the while loop.

def make_album(artist, album, songnumber=None):
    album_dict = {'artist_name': artist, 'album_name': album, 'song_count':songnumber}
    return album_dict

while True: 
    print("\Enter the name of an artist.")
    print("Enter 'q' at any time to quit.")
    artist_name = input("What is the name of the artist? ")
    if artist_name == 'q':
        break
    album_name = input("What is the name of their album? ")
    if album_name == 'q':
        break
    aa_pair = make_album(artist_name, album_name)
    print(aa_pair)

# Exercise 8.9: Create a list with a series of short messages. Pass the list to a function called show_messages(). 
# Have the function print each message. 

def show_messages(messages):
    for message in messages:
        print(message)
        
message_list = ['hi','lol','wyd']
show_messages(message_list)

# Exercise 8.10: Modify the program from exercise 8.9. 
# Have the send_messages() function print each message and move it to a list called sent_messages. 
# After calling the function, print both lists.  

def show_messages(messages):
    while messages:
        current_message = messages.pop()
        print(current_message)
        sent_messages.append(current_message)
        
message_list = ['hi','lol','wyd']
sent_messages = []
show_messages(message_list)

print(sent_messages)
print(message_list)

# Exercise 8.11: Modify the program from exercise 8.10. 
# Pass a copy of the list of messages to the function. 
# Print both lists to demonstrate the original list remains unchanged. 

def show_messages(messages):
    while messages:
        current_message = messages.pop()
        print(current_message)
        sent_messages.append(current_message)
        
message_list = ['hi','lol','wyd']
sent_messages = []
show_messages(message_list[:])

print(sent_messages)
print(message_list)

# Exercise 8.12: Write a function that accepts a list of items a person wants on a sandwich. The function should have one parameter that accepts any number of items when the function is called. The function should print a summary of the sandwich and its ingredients. Call the function three times, using a different number of arguments each time. 

def sandwiches(bread,*toppings):
    print(f"Your sandwich has {bread} bread with the following ingredients:\n{toppings}")
    
sandwiches('rye','ham','swiss')
sandwiches('white','bacon','lettuce','tomatoes')
sandwiches('sourdough','turkey','lettuce','tomatoes','mayonnaise')

# Exercise 8.13: Take the code from user_profile.py (provided in the book on page 149.) Build a profile for yourself using your first and last name, as well as three other key-value pairs that describe you. 

def build_profile(first,last,**user_info):
    user_info['first_name'] = first
    user_info['last_name'] = last
    return user_info
    
user_profile = build_profile('will','vandom',age='13',location='heatherfield',power='heart')

print(user_profile)

# Exercise 8.14: Write a function that stores information about a car in a dictionary. The function should accept a manufacturer and a model name. It should also accept an arbitrary number of keyword arguments. Call the function with two other name-value pairs. Print the dictionary. 

def cars(make,model,**kwargs):
    kwargs['make_name'] = make
    kwargs['model_name'] = model
    return kwargs
    
car_info = cars('toyota','camry',color='white',engine='v6')
print(car_info)

