# Exercise 9.1: Make a class called Restaurant. Have the __init__ method store two attributes: restaurant_name and cuisine_type. 
# Make a method called describe_restaurant() that prints the the name and cuisine type. 
# Make a method called open_restaurant() that prints a message saying the restaurant is open.
# Make an instance called restaurant from this class. 
# Print the two attributes individually and then call both methods.

class Restaurant:
    """Models a restaurant. 
    Has methods that state the name, cuisine type, and a message saying it's open."""

    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type

    def describe_restaurant(self):
        print(f"The restaurant is named {self.restaurant_name} and it serves {self.cuisine_type} food. ")

    def open_restaurant(self):
        print(f"{self.restaurant_name} is open! ")

restaurant = Restaurant("Olive Garden",'Italian')
print(f"My restaurant is called {restaurant.restaurant_name}. ")
print(f"It serves {restaurant.cuisine_type} food.")
restaurant.describe_restaurant()
restaurant.open_restaurant()

# Exercise 9.2: Take the class from exercise 9.1. 
# Create three different instances from the class.
# Call describe_restaurant() for each instance.

restaurant1 = Restaurant("Taco Bell",'Mexican')
restaurant2 = Restaurant("Panda Express",'Chinese')
restaurant3 = Restaurant("Mellow Mushroom",'Italian')

restaurant1.describe_restaurant()
restaurant2.describe_restaurant()
restaurant3.describe_restaurant()

# Exercise 9.3: Make a class called User. Create two attributes called first_name and last_name.
# Create other attributes associated with a user profile.
# Make the method describe_user() that prints a summary of the user's information.
# Make the method greet_user() that prints a greeting to the user.
# Create multiple instances for multiple users, and call both methods for each user.

class User:
    """Collects and prints data about users."""

    def __init__(self, first_name, last_name, username, join_date, age):
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.join_date = join_date
        self.age = age

    def describe_user(self):
        print(f"The user {self.username} joined on {self.join_date}. ")
        print(f"Their name is {self.first_name} {self.last_name}. ")
        print(f"They are {self.age} years old. \n")

    def greet_user(self):
        print(f"Hello {self.first_name}, how are you today?\n")

user1 = User('Marinette','Dupain-Cheng','marinettedesigned','03/28/2022','14')
user1.describe_user()
user1.greet_user()

user1 = User('Adrien','Agreste','adrianagrestebrand','10/2/2022','14')
user1.describe_user()
user1.greet_user()

user1 = User('Alya','Cesaire','itsalya.ladyblogger','6/24/2022','14')
user1.describe_user()
user1.greet_user()

# Exercise 9.4: Start with the program from exercise 9.1.
# Add the attribute number_served w/ a default value of 0. 
# Create an instance called restaurant from the class. 
# Print the number of customers served. Change the value and print it again.
# Add the method set_number_served() that sets the number of customers served.
# Call that method w/ a new number and print the value again.
# Add the method increment_number_served() that increments the number of customers.
# Call that method w/ a number to increment the count by.


class Restaurant:
    """Models a restaurant. 
    Has methods that state the name, cuisine type, and a message saying it's open."""

    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type
        self.number_served = 0

    def describe_restaurant(self):
        print(f"The restaurant is named {self.restaurant_name} and it serves {self.cuisine_type} food. ")

    def open_restaurant(self):
        print(f"{self.restaurant_name} is open! ")

    def set_number_served(self, newcount):
        self.number_served = newcount

    def increment_number_served(self,inc):
        self.number_served += inc

restaurant = Restaurant('PF Chang\'s','Chinese')
print(f"{restaurant.restaurant_name} has served {restaurant.number_served} people. ")

restaurant.number_served = 2
print(f"{restaurant.restaurant_name} has served {restaurant.number_served} people. ")

restaurant.set_number_served(5)
print(f"{restaurant.restaurant_name} has served {restaurant.number_served} people. ")

restaurant.increment_number_served(10)
print(f"{restaurant.restaurant_name} has served {restaurant.number_served} people. ")

# Exercise 9.5 Start with the code from 9.3. Write a method called increment_login_attempts()
# that increments the value of login_attempts by 1. Write another method called reset_login_attempts()
# that resets the value of login_attempts() to 0. 
# Make an instance of the User class and call increment_login_attempts() multiple times.
# Print the value of login_attempts()
# Call reset_login_attempts().
# Print login_attempts again and check if it is 0. 

class User:
    """Collects and prints data about users."""

    def __init__(self, first_name, last_name, username, join_date, age):
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.join_date = join_date
        self.age = age
        self.login_attempts = 0

    def describe_user(self):
        print(f"The user {self.username} joined on {self.join_date}. ")
        print(f"Their name is {self.first_name} {self.last_name}. ")
        print(f"They are {self.age} years old. \n")

    def greet_user(self):
        print(f"Hello {self.first_name}, how are you today?\n")

    def increment_login_attempts(self):
        self.login_attempts += 1

    def reset_login_attempts(self):
        self.login_attempts = 0


user1 = User('Marinette','Dupain-Cheng','marinettedesigned','03/28/2022','14')
print(f"{user1.username} has attempted to login {user1.login_attempts} time(s). ")

user1.increment_login_attempts()
user1.increment_login_attempts()
user1.increment_login_attempts()
print(f"{user1.username} has attempted to login {user1.login_attempts} time(s). ")

user1.reset_login_attempts()
print(f"{user1.username} has attempted to login {user1.login_attempts} time(s). ")

# Exercise 9.6: Start with the code from 9.1 or 9.4. 
# Write a class called IceCreamStand that inherits from the Restaurant class. 
# Add the attribute flavors that stores a list of ice cream flavors. 
# Write a method that displays these flavors.
# Create an instance of IceCreamStand and call this method.

class Restaurant:
    """Models a restaurant. 
    Has methods that state the name, cuisine type, and a message saying it's open."""

    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type

    def describe_restaurant(self):
        print(f"The restaurant is named {self.restaurant_name} and it serves {self.cuisine_type} food. ")

    def open_restaurant(self):
        print(f"{self.restaurant_name} is open! ")

class IceCreamStand(Restaurant):
    def __init__(self,restaurant_name, cuisine_type,flavors):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type
        self.flavors = flavors

    def display_flavors(self):
        print(f"{self.restaurant_name} serves ice cream. The following ice cream flavors are available: {self.flavors}")


my_icecreamstand = IceCreamStand('Sonic','fast food',['strawberry','vanilla','chocolate'])
my_icecreamstand.display_flavors()

# Exercise 9.7: Start with the code from 9.3. 
# Write a class called Admin that inherits from the User class.
# Add an attribute called privileges that stores a list of strings describing admin privileges.
# Write a method called show_privileges() that lists the admin's set of privileges. 
# Create an instance of Admin and call your method.

class User:
    """Collects and prints data about users."""

    def __init__(self, first_name, last_name, username, join_date, age):
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.join_date = join_date
        self.age = age
        self.isAdmin = False

    def describe_user(self):
        print(f"The user {self.username} joined on {self.join_date}. ")
        print(f"Their name is {self.first_name} {self.last_name}. ")
        print(f"They are {self.age} years old. \n")

    def greet_user(self):
        print(f"Hello {self.first_name}, how are you today?\n")

class Admin(User):
    def __init__(self, first_name, last_name, username, join_date, age, privileges):
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.join_date = join_date
        self.age = age
        self.privileges = privileges

    def show_privileges(self):
        print(f"The user {self.username} is an admin. They have the following admin privileges: {self.privileges}")


user1 = Admin('Gabriel','Agreste','agreste','09/01/2022','50',['can add post','can delete post','can ban user'])
user1.show_privileges()

# Exercise 9.8: Start with the code from 9.7.
# Write a separate Privileges class with one attribute, privileges, that stores a list of privileges.
# Move the show_privileges() method from the Admin class to the Privileges class. 
# Make a Privileges instance as an attribute in the Admin class. 
# Create a new instance of Admin and use your method to show its privileges.

class User:
    """Collects and prints data about users."""

    def __init__(self, first_name, last_name, username, join_date, age):
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.join_date = join_date
        self.age = age
        self.isAdmin = False

    def describe_user(self):
        print(f"The user {self.username} joined on {self.join_date}. ")
        print(f"Their name is {self.first_name} {self.last_name}. ")
        print(f"They are {self.age} years old. \n")

    def greet_user(self):
        print(f"Hello {self.first_name}, how are you today?\n")

class Privileges():
    def __init__(self, privileges):
        self.privileges = privileges

    def show_privileges(self):
        print(f"This user is an admin. They have the following admin privileges: {self.privileges}")

class Admin(User):
    def __init__(self, first_name, last_name, username, join_date, age):
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.join_date = join_date
        self.age = age
        self.privileges = Privileges(['can add post','can delete post','can ban user'])

user1 = Admin('Gabriel','Agreste','agreste','09/01/2022','50')
print(f"Regarding the user {user1.username}:")
user1.privileges.show_privileges()

# Exercise 9.9 Use the finalized electric_car.py from this chapter. 
# Add the method upgrade_battery() to the Battery class.
# This method should check to see if the battery size is 100.
# If the battery is not 100, the method should change the battery size to 100.
# Make an electric car with a default battery size, call get_range().
# Upgrade the battery.
# Call get_range() again. 

class Car:
    """A simple attempts to represent a car."""

    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0 

    def get_descriptive_name(self):
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()

    def read_odometer(self):
        print(f"This car has {self.odometer_reading} miles on it.")

    def update_odometer(self, mileage):
        if mileage >= self.odometer_reading:
            self.odometer_reading = mileage
        else:
            print("You can't roll back an odometer!")

    def increment_odometer(self, miles):
        self.odometer_reading += miles

class Battery:
    """A simple attempt to model a battery for an electric car."""

    def __init__(self, battery_size=75):
        """Initialize the battery's attributes."""
        self.battery_size = battery_size

    def describe_battery(self):
        """Print a statement describing the battery size."""
        print(f"This car has a {self.battery_size}-kWH battery.")

    def get_range(self):
        """Print a statement about the range this battery provides"""
        if self.battery_size == 75:
            range = 260
        elif self.battery_size == 100:
            range = 315

        print(f"This car can go about {range} miles on a full charge.")

    def upgrade_battery(self):
        if self.battery_size != 100:
            self.battery_size = 100

            print(f"Your battery size has been upgraded to 100!")

        else:
            print(f"Your battery cannot be upgraded any further.")

class ElectricCar(Car):
    """Represent aspects of a car specific to electric vehicles."""

    def __init__(self, make, model, year):
        """
        Initialize attributes of the parent class
        Then initialize attributes specific to an electric car
        """
        super().__init__(make, model, year)
        self.battery = Battery()

my_tesla = ElectricCar('tesla','model s','2019')
my_tesla.battery.get_range()
my_tesla.battery.upgrade_battery()
my_tesla.battery.get_range()

# For exercises 9.10, simply follow the directions and make sure your import works and your code still functions.

# Exercise 9.10: Store the latest version of the Restaurant class in a module. 
# Make a separate file that imports Restaurant
# Call one of the methods from Restaurant 

# Make a restaurant.py module with the Restaurant class
# In a separate file, write and run
from restaurant import Restaurant
my_restaurant = Restaurant("Olive Garden", "Italian")
my_restaurant.describe_restaurant()

# Exercise 9.11: Take the code from Exercise 9.8. 
# Store the User, Privileges, and Admin classes in one module.
# Create a separate file, make an Admin instance, and call show_privileges()

# Make a users.py module with the User, Privileges, and Admin classes
# Create a separate file, write and run
from users import User, Privileges, Admin
user1 = Admin('Gabriel','Agreste','agreste','09/01/2022','50')
user1.privileges.show_privileges()

# Exercise 9.12: Store the User class in a module.
# Store the Privileges and Admin classes in a separate module. 
# In a separate file, create an Admin instance and call show_privileges()

# In the Privileges and Admin module, write
from user import *

# In a new file admin.py, store the Admin and Privileges classes
# In a separate file, write and run
from admin import Admin, Privileges
user1 = Admin('Gabriel','Agreste','agreste','09/01/2022','50')
user1.privileges.show_privileges()

# Exercise 9.13: Make the class Die with the attribute sides. 
# Make the default value of sides equal to 6.
# Write the method roll_die() that prints a random number between 1 and the side number.
# Make a 6-sided die and roll it 10 times. 
# Make a 10-sided die and roll it 10 times.
# Make a 20-sided die and roll it 10 times.

from random import *
class Die:
    """A simulation for rolling a die."""
    def __init__(self, sides=6):
        self.sides = sides

    def roll_die(self):
        print (f"On a {self.sides}-sided die, you rolled a {randint(1,self.sides)}. ")


D6 = Die()
for i in range(10):
    D6.roll_die()

D10 = Die(10)
for i in range(10):
    D10.roll_die()

D20 = Die(20)
for i in range(10):
    D20.roll_die()


# Exercise 9.14: Make a list or tuple containing 10 numbers and five letters.
# Randomly select four numbers or letters from the list.
# Print a message saying any ticket matching these four numbers/letters wins a prize.

from random import *

lotto_list = ['1','2','3','4','5','6','7','8','9','A','B','C','D','E']
winning_ticket = []

while len(winning_ticket) < 4:
    pick = choice(lotto_list)
    if pick not in winning_ticket:
        winning_ticket.append(pick)

winning_ticket.sort()

print("If your ticket matches these numbers/letters, you win!")
print(winning_ticket)

# Exercise 9.15: Make a list or tuple called my_ticket.
# Write a loop that pulls tickets until you get a winning ticket.
# Print a message saying how many times the loop had to run for you to win.

my_ticket = []
n = 0

while my_ticket != winning_ticket:
    my_ticket = []
    for i in range(4):
        my_ticket.append(choice(lotto_list))
    my_ticket.sort()
    n += 1
    print(my_ticket)

print(f"It took you {n} time(s) to get a winning ticket!")

# Exercise 9.16: Go to pmotw.com and read about a python module of your choosing.
# I personally chose the calendar module. 
